apiVersion: v1
kind: Namespace
metadata:
  name: shray

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: shray

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: shray

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --default-ssl-certificate=shray/tls
            - --ingress-class=nginx-shray
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1

---
kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
    # Enable PROXY protocol
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    # Ensure the ELB idle timeout is less than nginx keep-alive timeout. By default,
    # NGINX keep-alive is set to 75s. If using WebSockets, the value will need to be
    # increased to '3600' to avoid any potential issues.
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: shray
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  use-proxy-protocol: "true"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx-shray
  name: shortbread
  namespace: shray
spec:
  rules:
  - host: 'SHORTBREAD_HOST'
    http:
      paths:
      - backend:
          serviceName: shortbread
          servicePort: 80
        path: /
  tls:
  - hosts:
    - SHORTBREAD_HOST
    secretName: tls
---
apiVersion: v1
kind: Service
metadata:
  name: shortbread
  namespace: shray
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: shortbread
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: shortbread-db
  namespace: shray
spec:
  ports:
  - name: tcp
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: shortbread-db
  type: ClusterIP
---
apiVersion: v1
stringData:
  SECRET_KEY_BASE: ef817269ef11017a63cae606875eb7037256bd7a7e31a955901e20220fab5e1e614c69b218703015025ad0bf08bb961b970107d13e29464b8ca820a8a4a22129
kind: Secret
metadata:
  name: shortbread
  namespace: shray
type: Opaque
---
apiVersion: v1
stringData:
  POSTGRES_PASSWORD: mysecretpassword
kind: Secret
metadata:
  name: shortbread-db
  namespace: shray
type: Opaque
---
apiVersion: v1
data:
  HOSTNAME: https://SHORTBREAD_HOST/
  REVISION: abcdefg
  RAILS_ENV: production
  DATABASE_URL: postgres://shortbread:mysecretpassword@shortbread-db:5432/shortbread_production
kind: ConfigMap
metadata:
  name: shortbread
  namespace: shray
---
apiVersion: v1
data:
  POSTGRES_DB: shortbread_production
  POSTGRES_USER: shortbread
  POSTGRES_HOST: shortbread-db
kind: ConfigMap
metadata:
  name: shortbread-db
  namespace: shray
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: shortbread
  name: shortbread
  namespace: shray
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: shortbread
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: shortbread
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: shortbread
        - secretRef:
            name: shortbread
        command:
        - "thin"
        args:
        - "start"
        - "-e"
        - "production"
        image: REGISTRY_URL:app
        imagePullPolicy: IfNotPresent
        name: shortbread
        ports:
        - containerPort: 3000
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: namely-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: shortbread
  name: shortbread-db
  namespace: shray
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: shortbread-db
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: shortbread-db
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: shortbread-db
        - secretRef:
            name: shortbread-db
        image: REGISTRY_URL:db
        imagePullPolicy: IfNotPresent
        name: shortbread-db
        ports:
        - containerPort: 3000
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: namely-registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30